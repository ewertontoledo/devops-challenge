apiVersion: apps/v1           
kind: Deployment              

metadata:
  name: {{ include "devops-challenge-app.fullname" . }}   # Nome do Deployment gerado dinamicamente
  labels:
    app.kubernetes.io/name: {{ include "devops-challenge-app.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}

spec:
  replicas: {{ .Values.replicaCount }}     # Número de réplicas (pods) desejadas

  selector:
    matchLabels:
      app: {{ include "devops-challenge-app.name" . }}  # Seleciona pods com esse label

  template:
    metadata:
      labels:
        app: {{ include "devops-challenge-app.name" . }}  # Labels para os pods gerados

    spec:
      containers:
        - name: {{ .Chart.Name }}                           # Nome do container
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"  # Imagem do container
          imagePullPolicy: {{ .Values.image.pullPolicy }}   # Política de pull da imagem
          ports:
            - containerPort: 8080                           # Porta exposta pelo container

          env:
            - name: PORT
              value: "8080"                                 # Variável de ambiente PORT
            - name: APP_NAME                                # Variável de ambiente APP_NAME via ConfigMap
              valueFrom:
                configMapKeyRef:
                  name: '{{ include "devops-challenge-app.fullname" . }}-config'
                  key: appName

         # Verifica se o container está vivo
          livenessProbe:                                   
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3

          # Verifica se o container está pronto para receber tráfego
          readinessProbe:                                   
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          
          # Recursos solicitados e limites para o container
          resources:                                      
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"